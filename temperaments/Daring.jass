struct Daring extends array
    implement TimerHead
    private Timer timer
    private static boolexpr expireC
    private static integer expireI
	private static constant integer THRESHOLD = 11 //12 or more
	private static constant real MODIFIER = 0.4
	private static constant real TICK_RATE = 0.2 //don't wanna check that fucking often
	private static constant real TIME_TICK = TICK_RATE * MODIFIER
    private static constant integer DEPRIVED_RADIUS = 450
	private static constant integer PRIMARY_RADIUS = 640
	private static constant integer SECONDARY_RADIUS = 800
	private static constant string TOOLTIP = "% of the time spent staying within "
	private static constant string TOOLTIP2 = " range of at least 12 enemies (Pious count as 3, Halde and bosses count as 6)"
	private static constant string SECONDARY_TOOLTIP = " while staying within "
	private static constant string SECONDARY_TOOLTIP2 = " range of 12 enemies (Pious count as 3, Halde count and bosses count as 9)."
	private HeroData h
	boolean is_primary
	real time_pool
	
	public static method initialize takes HeroData this, boolean isprimary returns nothing
        if 0==h then
            set .h = this
            set .timer = Timer.create(TICK_RATE, expireC, expireI)
            call add(.timer)
            set id[.timer] = this
			if isprimary then
				set h.fulfillment_percentage1 = "40"
				set h.tooltip1 = TOOLTIP + I2S(PRIMARY_RADIUS) + TOOLTIP2
				set h.tooltip2 = "."
				set h.hidden_tooltip = SECONDARY_TOOLTIP + I2S(PRIMARY_RADIUS) + SECONDARY_TOOLTIP2
			elseif h.deprivation != 1 then
				set h.fulfillment_percentage2 = "40"
				set h.tooltip2 = SECONDARY_TOOLTIP + I2S(SECONDARY_RADIUS) + SECONDARY_TOOLTIP2
			else //deprivation is already primary
				set h.fulfillment_percentage1 = "40"
				set h.tooltip1 = TOOLTIP + I2S(DEPRIVED_RADIUS) + TOOLTIP2 + Deprivation.TOOLTIP_ADDENDUM
				call h.modPow(-2)
			endif
			set is_primary = isprimary
			set h.deprived_tooltip = deprivedTooltip
			set time_pool = 0
        endif
    endmethod

	static method deprivedTooltip takes HeroData this returns nothing
		if h.deprivation != 0 then
			set h.fulfillment_percentage1 = "40"
			set h.tooltip1 = TOOLTIP + I2S(DEPRIVED_RADIUS) + TOOLTIP2
		else
			set h.fulfillment_percentage1 = "40"
			set h.tooltip1 = TOOLTIP + I2S(PRIMARY_RADIUS) + TOOLTIP2
			set h.tooltip2 = "."
		endif
	endmethod
	
	static method callDestroy takes HeroData this returns nothing
		call destroy()
	endmethod
	method destroy takes nothing returns nothing
		call remove(.timer)
		if is_primary then
			set h.tooltip1 = ""
		elseif h.deprivation != 1 then
			set h.tooltip2 = "."
		else
			set h.tooltip1 = Deprivation.TOOLTIP
			call h.modPow(2)
		endif
		set h = 0
	endmethod
	
	static method check takes HeroData this returns real
		local real tp = time_pool
		set time_pool = 0
		return tp
    endmethod
    
    private static method expire takes nothing returns boolean
        local thistype this = thistype(Timer.expired).first
		local unit fog
		local integer nearby_enemies
        loop
            set this = id[this]
			
			if h.deprivation == 0 then
				if is_primary then
					call GroupEnumUnitsInRange(grp, h.x, h.y, PRIMARY_RADIUS, null)
				else
					call GroupEnumUnitsInRange(grp, h.x, h.y, SECONDARY_RADIUS, null)
				endif
			else
				call GroupEnumUnitsInRange(grp, h.x, h.y, DEPRIVED_RADIUS, null)
			endif
			
			set nearby_enemies = 0
			loop
				set fog = FirstOfGroup(grp)
				exitwhen null==fog
				if not IsUnitAlly(fog, h.owner) and UnitAlive(fog) then
					set nearby_enemies = nearby_enemies + 1
					if nearby_enemies > THRESHOLD then
						call GroupClear(grp)
						exitwhen true
					endif
				endif
				call GroupRemoveUnit(grp, fog)
			endloop
			
			if nearby_enemies > THRESHOLD then
				set time_pool = time_pool + TIME_TICK
			endif
			
            set this = Timer(.timer).next
            exitwhen this == 0
        endloop
        return true
    endmethod
    
    private static method onInit takes nothing returns nothing
        set expireC = Condition(function thistype.expire)
        set expireI = thistype.expire
    endmethod
endstruct