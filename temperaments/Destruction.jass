struct Destruction extends array
	private static constant real PRIMARY_MODIFIER = .01 //100 damage for 1 second
	private static constant real SECONDARY_MODIFIER = .0125 //80 damage for 1 second
	private static constant real DEPRIVED_MODIFIER = .06667 //150 damage for 1 second
	private static constant string TOOLTIP = "% of your damage dealt in seconds (processed over time)"
	private static constant string SECONDARY_TOOLTIP = " as you deal 80 damage per second."
    private HeroData h
	boolean is_primary
	real prev_total_damage
	real time_pool
	
	public static method initialize takes HeroData this, boolean isprimary returns nothing
		local string tt
        if 0==h then
            set .h = this
			if isprimary then
				set h.fulfillment_percentage1 = "1"
				set h.tooltip1 = TOOLTIP
				set h.tooltip2 = "."
				set h.hidden_tooltip = ""
			elseif h.deprivation != 1 then
				set h.fulfillment_percentage2 = "1.25"
				if h.hidden_tooltip != "" then
					set tt = h.tooltip1
					set h.tooltip1 = TOOLTIP
					set h.tooltip2 = h.hidden_tooltip
					set h.hidden_tooltip = tt
				else
					set h.tooltip2 = SECONDARY_TOOLTIP
				endif
			else
				set h.fulfillment_percentage1 = "0.66"
				set h.tooltip1 = TOOLTIP + Deprivation.TOOLTIP_ADDENDUM
				call h.modPow(-2)
			endif
			set prev_total_damage = 0
			set time_pool = 0
			set is_primary = isprimary
            set h.deprived_tooltip = deprivedTooltip
        endif
    endmethod

	static method deprivedTooltip takes HeroData this returns nothing
		if h.deprivation != 0 then
			set h.fulfillment_percentage1 = "0.66"
			set h.tooltip1 = TOOLTIP
		else
			set h.fulfillment_percentage1 = "1"
			set h.tooltip1 = TOOLTIP
			set h.tooltip2 = "."
		endif
	endmethod
	
	static method callDestroy takes HeroData this returns nothing
		call destroy()
	endmethod
	//do same thing for depravity VVVVVVVVV
	//deal with direction interaction
	method destroy takes nothing returns nothing
		set h = 0
		if is_primary then
			set h.tooltip1 = ""
		elseif h.deprivation != 1 then
			if h.hidden_tooltip != "" then
				set h.tooltip1 = h.hidden_tooltip
				set h.hidden_tooltip = h.tooltip2
			endif
			set h.tooltip2 = "."
		else
			set h.tooltip1 = Deprivation.TOOLTIP
			call h.modPow(2)
		endif
	endmethod
	
	static method check takes HeroData this returns real
		local real tp = time_pool
		if h.total_damage < prev_total_damage then
			set prev_total_damage = 0
		endif
		if 0!=h then
			if h.deprivation == 0 then
				if is_primary then
					set time_pool = time_pool + (h.total_damage-prev_total_damage) * PRIMARY_MODIFIER
				else
					set time_pool = time_pool + (h.total_damage-prev_total_damage) * SECONDARY_MODIFIER
				endif
			else
				set time_pool = time_pool + (h.total_damage-prev_total_damage) * DEPRIVED_MODIFIER
			endif
			set prev_total_damage = h.total_damage
		endif
		if time_pool < 0.1 then
			set time_pool = 0
			return tp
		else
			set time_pool = time_pool - 0.1
			return 0.1
		endif
    endmethod
endstruct
/*struct Destruction extends array
	static thistype array destruction_array[MAX_PLAYERS]
	static integer max_index = 0
	private static constant real TIME_BONUS = 5
	private static constant real RANGE_SQUARED = 600*600
	private integer index
    private HeroData h
	boolean is_primary
	integer nearby_deaths
	private trigger enemy_death
	
	public static method initialize takes thistype this returns nothing
        set .h = this
		set enemy_death = CreateTrigger()
		call TriggerRegisterPlayerUnitEvent(enemy_death, Player(10), EVENT_PLAYER_UNIT_DEATH, null)
		call TriggerRegisterPlayerUnitEvent(enemy_death, Player(11), EVENT_PLAYER_UNIT_DEATH, null)
		call TriggerRegisterPlayerUnitEvent(enemy_death, Player(12), EVENT_PLAYER_UNIT_DEATH, null)
		call TriggerAddCondition(enemy_death, function thistype.deathevent)
		set index = max_index
		set destruction_array[max_index] = this
		set max_index = max_index+1
		set nearby_deaths = 0
		if h.evaluate_secondary_temperament then
			set is_primary = false
		else
			set is_primary = true
		endif
    endmethod
	
	method destroy takes nothing returns nothing
		set h = 0
		call DestroyTrigger(enemy_death)
		set destruction_array[index] = destruction_array[max_index-1]
		set max_index = max_index-1
	endmethod
	
	static method check takes nothing returns boolean
		local thistype this = HeroData.temp_hero_data
		if 0==h then
			call initialize(this)
		endif
		
		//only true when stored time > 0
		if is_primary then
			set h.is_primary_valid = true
		else
			set h.is_secondary_valid = true
		endif
		
		return false
    endmethod
	
	static method deathevent takes nothing returns nothing
		local unit u = GetTriggerUnit()
		local real x2 = GetUnitX(u)
		local real y2 = GetUnitY(u)
		local real x1
		local real y1
		local real dx
		local real dy
		local thistype this
		local integer i = 0
		loop
			exitwhen i==max_index
			set this = destruction_array[i]
			if (is_primary and h.is_secondary_valid) or (not is_primary and h.is_primary_valid) then
				if UnitAlive(h.hero) then
					set x1 = h.x
					set y1 = h.y
					set dx = x2-x1
					set dy = y2-y1
					if (dx*dx)+(dy*dy)<RANGE_SQUARED then
						set nearby_deaths = nearby_deaths+1
					endif
				endif
			endif
			set i = i+1
		endloop
		set u = null
	endmethod
endstruct*/