struct Direction extends array
	private static constant real PRIMARY_DIST = 180
	private static constant real DEPRIVED_DIST = 270
	private static constant real SECONDARY_DIST = 150
	private static constant real PRIMARY_MOD = 0.00555
	private static constant real DEPRIVED_MOD = 0.0037
	private static constant real SECONDARY_MOD = 0.00666
	private static constant string TOOLTIP = " of the distance you travel in seconds"
	private static constant string SECONDARY_TOOLTIP = " while moving."
    private HeroData h
	boolean is_primary
	real prev_x
	real prev_y
	real distance_travelled
	
	public static method initialize takes HeroData this, boolean isprimary returns nothing
        if 0==h then
            set .h = this
            set prev_x = h.x
            set prev_y = h.y
            set is_primary = isprimary
			set h.deprived_tooltip = deprivedTooltip
			if isprimary then
				set h.fulfillment_percentage1 = "(1/1800)"
				set h.tooltip1 = TOOLTIP
				set h.tooltip2 = "."
				set h.hidden_tooltip = ""
			elseif h.deprivation != 1 then
				set h.fulfillment_percentage2 = "100"
				set h.tooltip2 = SECONDARY_TOOLTIP
			else
				set h.fulfillment_percentage1 = "(1/2700)"
				set h.tooltip1 = TOOLTIP + Deprivation.TOOLTIP_ADDENDUM
				call h.modPow(-2)
			endif
        endif
    endmethod

	static method deprivedTooltip takes HeroData this returns nothing
		if h.deprivation != 0 then
			set h.fulfillment_percentage1 = "(1/2700)"
			set h.tooltip1 = TOOLTIP
		else
			set h.fulfillment_percentage1 = "(1/1800)"
			set h.tooltip1 = TOOLTIP
			set h.tooltip2 = "."
		endif
	endmethod
	
	static method callDestroy takes HeroData this returns nothing
		call destroy()
	endmethod
	method destroy takes nothing returns nothing
		set h = 0
		if is_primary then
			set h.tooltip1 = ""
		elseif h.deprivation != 1 then
			set h.tooltip2 = "."
		else
			set h.tooltip1 = Deprivation.TOOLTIP
			call h.modPow(2)
		endif
	endmethod
	
	static method check takes HeroData this returns real
		local real dt
		if prev_x != h.x and prev_y != h.y then
			set distance_travelled = distance_travelled + GetDistance(h.x, h.y, prev_x, prev_y)
			set prev_x = h.x
			set prev_y = h.y
			if h.deprivation == 0 then
				if is_primary then
					if distance_travelled > PRIMARY_DIST then
						set distance_travelled = distance_travelled - PRIMARY_DIST
						return 0.1
					else
						set dt = distance_travelled
						call BJDebugMsg("DT: " + R2S(dt))
						set distance_travelled = 0
						return 0.1*dt*PRIMARY_MOD
					endif
				else
					if distance_travelled > SECONDARY_DIST then
						set distance_travelled = distance_travelled - SECONDARY_DIST
						return 0.1
					else
						set dt = distance_travelled
						set distance_travelled = 0
						return 0.1*dt*SECONDARY_MOD
					endif
				endif
			else
				if distance_travelled > DEPRIVED_DIST then
					set distance_travelled = distance_travelled - DEPRIVED_DIST
					return 0.1
				else
					set dt = distance_travelled
					set distance_travelled = 0
					return 0.1*dt*DEPRIVED_MOD
				endif
			endif
		endif
		set prev_x = h.x
		set prev_y = h.y
		return 0.0
    endmethod
endstruct